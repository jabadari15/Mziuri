import java.util.ArrayList;
import java.util.Random;

// Temel Kütüphane Çalışanı Sınıfı
class LibraryEmployee {
    private String firstName;
    private String lastName;

    // Constructor
    public LibraryEmployee(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    // Getter methods
    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    // toString method
    @Override
    public String toString() {
        return "Employee: " + firstName + " " + lastName;
    }
}

// Muhasebeci Sınıfı (LibraryEmployee'den türetiliyor)
class Accountant extends LibraryEmployee {
    public Accountant(String firstName, String lastName) {
        super(firstName, lastName);
    }

    @Override
    public String toString() {
        return "Accountant: " + getFirstName() + " " + getLastName();
    }
}

// Kitap Veren Sınıfı (LibraryEmployee'den türetiliyor)
class BookIssuer extends LibraryEmployee {
    private String availableTime;

    public BookIssuer(String firstName, String lastName, String availableTime) {
        super(firstName, lastName);
        this.availableTime = availableTime;
    }

    // Getter for availableTime
    public String getAvailableTime() {
        return availableTime;
    }

    @Override
    public String toString() {
        return "Book Issuer: " + getFirstName() + " " + getLastName() + ", Available Time: " + availableTime;
    }
}

// Kitap Danışmanı Sınıfı (LibraryEmployee'den türetiliyor)
class BookConsultant extends LibraryEmployee {
    private double consultantScore;

    public BookConsultant(String firstName, String lastName, double consultantScore) {
        super(firstName, lastName);
        this.consultantScore = consultantScore;
    }

    // Method to recommend a book
    public Book recommendBook(Library library) {
        return library.getBooks().get(new Random().nextInt(library.getBooks().size())); // Random book selection
    }

    @Override
    public String toString() {
        return "Book Consultant: " + getFirstName() + " " + getLastName() + ", Score: " + consultantScore;
    }
}

// Sessizlik Denetleyicisi Sınıfı (LibraryEmployee'den türetiliyor)
class SilenceController extends LibraryEmployee {
    private double strictness;

    public SilenceController(String firstName, String lastName, double strictness) {
        super(firstName, lastName);
        this.strictness = strictness;
    }

    @Override
    public String toString() {
        return "Silence Controller: " + getFirstName() + " " + getLastName() + ", Strictness: " + strictness;
    }
}

// Genel Kitap Sınıfı
class Book {
    private String title;
    private int pages;
    private String author;
    private boolean isHardcover;

    public Book(String title, int pages, String author, boolean isHardcover) {
        this.title = title;
        this.pages = pages;
        this.author = author;
        this.isHardcover = isHardcover;
    }

    public void read() {
        System.out.println("I am reading: " + title);
    }

    @Override
    public String toString() {
        return "Book: " + title + ", Author: " + author + ", Pages: " + pages + ", Hardcover: " + isHardcover;
    }

    // Getters
    public String getTitle() {
        return title;
    }

    public int getPages() {
        return pages;
    }

    public String getAuthor() {
        return author;
    }

    public boolean isHardcover() {
        return isHardcover;
    }
}

// Bilim Kitabı Sınıfı (Book'tan türetiliyor)
class ScienceBook extends Book {
    private String scientificField;

    public ScienceBook(String title, int pages, String author, boolean isHardcover, String scientificField) {
        super(title, pages, author, isHardcover);
        this.scientificField = scientificField;
    }

    @Override
    public String toString() {
        return super.toString() + ", Field: " + scientificField;
    }

    // Getter for scientificField
    public String getScientificField() {
        return scientificField;
    }
}

// Macera Kitabı Sınıfı (Book'tan türetiliyor)
class AdventureBook extends Book {
    public AdventureBook(String title, int pages, String author, boolean isHardcover) {
        super(title, pages, author, isHardcover);
    }

    @Override
    public String toString() {
        return super.toString() + ", Genre: Adventure";
    }
}

// Fantastik Kitap Sınıfı (Book'tan türetiliyor)
class FantasyBook extends Book {
    public FantasyBook(String title, int pages, String author, boolean isHardcover) {
        super(title, pages, author, isHardcover);
    }

    @Override
    public String toString() {
        return super.toString() + ", Genre: Fantasy";
    }
}

// Kütüphane Sınıfı
class Library {
    private String libraryName;
    private ArrayList<LibraryEmployee> employees;
    private ArrayList<Book> books;

    public Library(String libraryName) {
        this.libraryName = libraryName;
        this.employees = new ArrayList<>();
        this.books = new ArrayList<>();
    }

    // Add an employee
    public void addEmployee(LibraryEmployee employee) {
        employees.add(employee);
    }

    // Add a book
    public void addBook(Book book) {
        books.add(book);
    }

    // Get all books
    public ArrayList<Book> getBooks() {
        return books;
    }

    // toString method
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Library Name: ").append(libraryName).append("\n");
        sb.append("Employees:\n");
        for (LibraryEmployee employee : employees) {
            sb.append(employee.toString()).append("\n");
        }
        sb.append("Books:\n");
        for (Book book : books) {
            sb.append(book.toString()).append("\n");
        }
        return sb.toString();
    }
}

// Ana Sınıf (Main)
public class Main {
    public static void main(String[] args) {
        // 1. Kütüphane nesnesi oluşturma
        Library library = new Library("City Central Library");

        // 2. Çalışanlar oluşturma ve kütüphaneye ekleme
        LibraryEmployee employee1 = new Accountant("John", "Doe");
        LibraryEmployee employee2 = new BookIssuer("Alice", "Smith", "9 AM - 5 PM");
        LibraryEmployee employee3 = new BookConsultant("Bob", "Johnson", 9.5);
        LibraryEmployee employee4 = new SilenceController("Charlie", "Brown", 8.0);

        library.addEmployee(employee1);
        library.addEmployee(employee2);
        library.addEmployee(employee3);
        library.addEmployee(employee4);

        // 3. Kitaplar oluşturma ve kütüphaneye ekleme
        Book book1 = new ScienceBook("Physics 101", 300, "Dr. Jane", true, "Physics");
        Book book2 = new AdventureBook("The Lost Island", 250, "Mark Twain", false);
        Book book3 = new FantasyBook("The Dragon's Tale", 450, "J.K. Rowling", true);

        library.addBook(book1);
        library.addBook(book2);
        library.addBook(book3);

        // 4. Kitap danışmanından bir kitap seçme ve konsola yazdırma
        System.out.println("Book Consultant's Selected Book: ");
        BookConsultant consultant = (BookConsultant) employee3;
        Book recommendedBook = consultant.recommendBook(library);
        System.out.println("Recommended Book: " + recommendedBook.toString());

        // 5. Kütüphane bilgilerini yazdırma
        System.out.println("\nLibrary Information:");
        System.out.println(library.toString());
    }
}
